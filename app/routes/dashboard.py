


# # hire_ai/app/routes/dashboard.py

# import requests
# from flask import Blueprint, render_template, request, redirect, url_for, flash, current_app
# from flask_login import login_required, current_user
# from app import mongo
# from datetime import datetime

# dashboard_bp = Blueprint('dashboard', __name__)

# @dashboard_bp.route('/dashboard', methods=['GET', 'POST'])
# @login_required
# def main_dashboard():
#     if request.method == 'POST':
#         form_data = request.form.to_dict()
        
#         # Add user and timestamp info, converting datetime to a string
#         form_data['submitted_by'] = current_user.email
#         form_data['submitted_at'] = datetime.utcnow().isoformat()

#         # 1. Save submission to MongoDB
#         try:
#             # Insert the form data into the 'form_submissions' collection
#             mongo.db.form_submissions.insert_one(form_data)
#         except Exception as e:
#             flash(f'Error saving data to database: {e}', 'danger')
#             return render_template('dashboard/dashboard.html')

#         # === START OF FIX ===
#         # The ObjectId generated by MongoDB is not JSON serializable.
#         # Remove it from the dictionary before sending to the webhook.
#         if '_id' in form_data:
#             del form_data['_id']
#         # === END OF FIX ===

#         # 2. Push data to n8n webhook
#         webhook_url = current_app.config.get('N8N_WEBHOOK_URL')
#         if webhook_url:
#             try:
#                 response = requests.post(webhook_url, json=form_data)
#                 response.raise_for_status() # Raise an exception for bad status codes
#             except requests.exceptions.RequestException as e:
#                 flash(f'Data saved, but failed to trigger automation: {e}', 'warning')
#                 return redirect(url_for('candidates.candidate_insights'))

#         flash('Your requirements have been submitted successfully!', 'success')
#         return redirect(url_for('candidates.candidate_insights'))

#     return render_template('dashboard/dashboard.html')


# hire_ai/app/routes/dashboard.py

import requests
from flask import Blueprint, render_template, request, redirect, url_for, flash, current_app
from flask_login import login_required, current_user
from app import mongo
from datetime import datetime

dashboard_bp = Blueprint('dashboard', __name__)

@dashboard_bp.route('/dashboard', methods=['GET', 'POST'])
@login_required
def main_dashboard():
    if request.method == 'POST':
        form_data = request.form.to_dict()
        
        # Add user and timestamp info, converting datetime to a string
        form_data['submitted_by'] = current_user.email
        form_data['submitted_at'] = datetime.utcnow().isoformat()

        # 1. Save submission to MongoDB
        try:
            mongo.db.form_submissions.insert_one(form_data)
        except Exception as e:
            flash(f'Error saving data to database: {e}', 'danger')
            return render_template('dashboard/dashboard.html')

        # === FIX: remove _id before sending ===
        form_data.pop('_id', None)

        # 2. Push data to n8n webhook
        webhook_url = current_app.config.get('N8N_WEBHOOK_URL')
        if webhook_url:
            try:
                response = requests.post(webhook_url, json=form_data, timeout=10)
                response.raise_for_status()
                print("✅ Webhook triggered successfully:", response.text)
            except requests.exceptions.RequestException as e:
                print("❌ Webhook error:", e)
                if hasattr(e, "response") and e.response is not None:
                    print("❌ Webhook response:", e.response.text)
                flash(f'Data saved, but failed to trigger automation: {e}', 'warning')
                return redirect(url_for('candidates.candidate_insights'))

        flash('Your requirements have been submitted successfully!', 'success')
        return redirect(url_for('candidates.candidate_insights'))

    return render_template('dashboard/dashboard.html')
